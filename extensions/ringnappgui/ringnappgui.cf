<nodllstartup>

<code>

#define _WINDOWS 1

#include "inet/inet.h"
#include "osapp/osmain.h"
#include "osgui/osgui.h"
#include "nappgui.h"

#define String RingString
#include "ring.h"

</code>

<comment>
unicode.h
</comment>

uint32_t unicode_convers(const char_t *from_str, char_t *to_str, const unicode_t from, const unicode_t to, const uint32_t osize)
uint32_t unicode_convers_n(const char_t *from_str, char_t *to_str, const unicode_t from, const unicode_t to, const uint32_t isize, const uint32_t osize)
uint32_t unicode_convers_nbytes(const char_t *str, const unicode_t from, const unicode_t to)

<comment>
uint32_t unicode_convers_nbytes_n(const char_t *str, const uint32_t isize, const unicode_t from, const unicode_t to)
</comment>

uint32_t unicode_nbytes(const char_t *str, const unicode_t format)
uint32_t unicode_nchars(const char_t *str, const unicode_t format)
uint32_t unicode_to_u32(const char_t *str, const unicode_t format)
uint32_t unicode_to_u32b(const char_t *str, const unicode_t format, uint32_t *bytes)
uint32_t unicode_to_char(const uint32_t codepoint, char_t *str, const unicode_t format)
bool_t unicode_valid_str(const char_t *str, const unicode_t format)
bool_t unicode_valid_str_n(const char_t *str, const uint32_t size, const unicode_t format)
bool_t unicode_valid(const uint32_t codepoint)
const char_t *unicode_next(const char_t *str, const unicode_t format)
const char_t *unicode_back(const char_t *str, const unicode_t format)
bool_t unicode_isascii(const uint32_t codepoint)
bool_t unicode_isalnum(const uint32_t codepoint)
bool_t unicode_isalpha(const uint32_t codepoint)
bool_t unicode_iscntrl(const uint32_t codepoint)
bool_t unicode_isdigit(const uint32_t codepoint)
bool_t unicode_isgraph(const uint32_t codepoint)
bool_t unicode_isprint(const uint32_t codepoint)
bool_t unicode_ispunct(const uint32_t codepoint)
bool_t unicode_isspace(const uint32_t codepoint)
bool_t unicode_isxdigit(const uint32_t codepoint)
bool_t unicode_islower(const uint32_t codepoint)
bool_t unicode_isupper(const uint32_t codepoint)
uint32_t unicode_tolower(const uint32_t codepoint)
uint32_t unicode_toupper(const uint32_t codepoint)


<comment>
types.h
</comment>

uint32_t min_u32(const uint32_t v1, const uint32_t v2)
real32_t min_r32(const real32_t v1, const real32_t v2)
real64_t min_r64(const real64_t v1, const real64_t v2)
uint32_t max_u32(const uint32_t v1, const uint32_t v2)
real32_t max_r32(const real32_t v1, const real32_t v2)
real64_t max_r64(const real64_t v1, const real64_t v2)
real32_t abs_r32(const real32_t v)
uint8_t to_u8(const uint32_t v)


<comment>
sewer.h
</comment>

void sewer_start(void)
void sewer_finish(void)
uint32_t sewer_nappgui_major(void)
uint32_t sewer_nappgui_minor(void)
uint32_t sewer_nappgui_patch(void)
uint32_t sewer_nappgui_build(void)
const char_t *sewer_nappgui_version(const bool_t full)



<comment>
ptr.h
</comment>

void *ptr_dget_imp(void **dptr)
void *ptr_dget_no_null_imp(void **dptr)
void ptr_destopt_imp(void **dptr, FPtr_destroy func_destroy)
void *ptr_copyopt_imp(void *ptr, FPtr_copy func_copy)


<comment>
cassert.h
</comment>

void cassert_set_func(void *data, FPtr_assert func_assert)
void cassert_imp(bool_t cond, const char_t *detail, const char_t *file, const uint32_t line)
void cassert_fatal_imp(bool_t cond, const char_t *detail, const char_t *file, const uint32_t line)
void cassert_no_null_imp(void *ptr, const char_t *detail, const char_t *file, const uint32_t line)
<comment>
void cassert_no_nullf_imp(void (*ptr)(void), const char_t *detail, const char_t *file, const uint32_t line)
</comment>
void cassert_default_imp(const char_t *file, const uint32_t line)


<comment>
bstd.h
</comment>

<comment>
uint32_t bstd_sprintf(char_t *str, const uint32_t size, const char_t *format, ...) __PRINTF(3, 4)
uint32_t bstd_printf(const char_t *format, ...) __PRINTF(1, 2)
uint32_t bstd_eprintf(const char_t *format, ...) __PRINTF(1, 2)
</comment>

uint32_t bstd_vsprintf(char_t *str, const uint32_t size, const char_t *format, va_list args)
uint32_t bstd_writef(const char_t *str)
uint32_t bstd_ewritef(const char_t *str)
bool_t bstd_read(byte_t *data, const uint32_t size, uint32_t *rsize)
bool_t bstd_write(const byte_t *data, const uint32_t size, uint32_t *wsize)
bool_t bstd_ewrite(const byte_t *data, const uint32_t size, uint32_t *wsize)

<comment>
bmem.h
</comment>

byte_t *bmem_aligned_malloc(const uint32_t size, const uint32_t align)
byte_t *bmem_aligned_realloc(byte_t *mem, const uint32_t size, const uint32_t new_size, const uint32_t align)
void bmem_free(byte_t *mem)
void bmem_set1(byte_t *dest, const uint32_t size, const byte_t mask)
void bmem_set4(byte_t *dest, const uint32_t size, const byte_t *mask)
void bmem_set8(byte_t *dest, const uint32_t size, const byte_t *mask)
void bmem_set16(byte_t *dest, const uint32_t size, const byte_t *mask)
int bmem_cmp(const byte_t *mem1, const byte_t *mem2, const uint32_t size)
bool_t bmem_is_zero(const byte_t *mem, const uint32_t size)
void bmem_set_zero(byte_t *dest, const uint32_t size)
void bmem_copy(byte_t *dest, const byte_t *src, const uint32_t size)
void bmem_move(byte_t *dest, const byte_t *src, const uint32_t size)
bool_t bmem_overlaps(const byte_t *mem1, const byte_t *mem2, const uint32_t size1, const uint32_t size2)
void bmem_rev(byte_t *mem, const uint32_t size)
void bmem_rev2(byte_t *mem)
void bmem_rev4(byte_t *mem)
void bmem_rev8(byte_t *mem)
void bmem_revcopy(byte_t *dest, const byte_t *src, const uint32_t size)
void bmem_rev_elems_imp(byte_t *data, const uint32_t num_elems, const uint32_t elem_size)
void bmem_swap(byte_t *mem1, byte_t *mem2, const uint32_t size)
void bmem_shuffle(byte_t *mem, const uint32_t size, const uint32_t esize)


<comment>
bmath.h
</comment>

real32_t bmath_cosf(const real32_t angle)
real64_t bmath_cosd(const real64_t angle)
real32_t bmath_sinf(const real32_t angle)
real64_t bmath_sind(const real64_t angle)
real32_t bmath_tanf(const real32_t angle)
real64_t bmath_tand(const real64_t angle)
real32_t bmath_acosf(const real32_t cos)
real64_t bmath_acosd(const real64_t cos)
real32_t bmath_asinf(const real32_t sin)
real64_t bmath_asind(const real64_t sin)
real32_t bmath_atan2f(const real32_t y, const real32_t x)
real64_t bmath_atan2d(const real64_t y, const real64_t x)
real32_t bmath_norm_anglef(const real32_t a)
real64_t bmath_norm_angled(const real64_t a)
real32_t bmath_sqrtf(const real32_t value)
real64_t bmath_sqrtd(const real64_t value)
real32_t bmath_isqrtf(const real32_t value)
real64_t bmath_isqrtd(const real64_t value)
real32_t bmath_logf(const real32_t value)
real64_t bmath_logd(const real64_t value)
real32_t bmath_log10f(const real32_t value)
real64_t bmath_log10d(const real64_t value)
real32_t bmath_expf(const real32_t value)
real64_t bmath_expd(const real64_t value)
real32_t bmath_powf(const real32_t base, const real32_t exponent)
real64_t bmath_powd(const real64_t base, const real64_t exponent)
real32_t bmath_absf(const real32_t value)
real64_t bmath_absd(const real64_t value)
real32_t bmath_maxf(const real32_t value1, const real32_t value2)
real64_t bmath_maxd(const real64_t value1, const real64_t value2)
real32_t bmath_minf(const real32_t value1, const real32_t value2)
real64_t bmath_mind(const real64_t value1, const real64_t value2)
real32_t bmath_clampf(const real32_t value, const real32_t min, const real32_t max)
real64_t bmath_clampd(const real64_t value, const real64_t min, const real64_t max)
real32_t bmath_modf(const real32_t num, const real32_t den)
real64_t bmath_modd(const real64_t num, const real64_t den)
real32_t bmath_modff(const real32_t value, real32_t *intpart)
real64_t bmath_modfd(const real64_t value, real64_t *intpart)
uint32_t bmath_precf(const real32_t value)
uint32_t bmath_precd(const real64_t value)
real32_t bmath_roundf(const real32_t value)
real64_t bmath_roundd(const real64_t value)
real32_t bmath_round_stepf(const real32_t value, const real32_t step)
real64_t bmath_round_stepd(const real64_t value, const real64_t step)
real32_t bmath_floorf(const real32_t value)
real64_t bmath_floord(const real64_t value)
real32_t bmath_ceilf(const real32_t value)
real64_t bmath_ceild(const real64_t value)
void bmath_rand_seed(const uint32_t seed)
real32_t bmath_randf(const real32_t from, const real32_t to)
real64_t bmath_randd(const real64_t from, const real64_t to)
uint32_t bmath_randi(const uint32_t from, const uint32_t to)
REnv *bmath_rand_env(const uint32_t seed)
void bmath_rand_destroy(REnv **env)
real32_t bmath_rand_mtf(REnv *env, const real32_t from, const real32_t to)
real64_t bmath_rand_mtd(REnv *env, const real64_t from, const real64_t to)
uint32_t bmath_rand_mti(REnv *env, const uint32_t from, const uint32_t to)


<comment>
blib.h
</comment>

uint32_t blib_strlen(const char_t *str)
char_t *blib_strstr(const char_t *str, const char_t *substr)
void blib_strcpy(char_t *dest, const uint32_t size, const char_t *src)
void blib_strncpy(char_t *dest, const uint32_t size, const char_t *src, const uint32_t n)
void blib_strcat(char_t *dest, const uint32_t size, const char_t *src)
int blib_strcmp(const char_t *str1, const char_t *str2)
int blib_strncmp(const char_t *str1, const char_t *str2, const uint32_t n)
uint32_t blib_strftime(char_t *dest, const uint32_t size, const char_t *format, const int16_t year, const uint8_t month, const uint8_t mday, const uint8_t wday, const uint8_t hour, const uint8_t minute, const uint8_t second)
int64_t blib_strtol(const char_t *str, char_t **endptr, uint32_t base, bool_t *err)
uint64_t blib_strtoul(const char_t *str, char_t **endptr, uint32_t base, bool_t *err)
real32_t blib_strtof(const char_t *str, char_t **endptr, bool_t *err)
real64_t blib_strtod(const char_t *str, char_t **endptr, bool_t *err)
void blib_qsort(byte_t *array, const uint32_t nelems, const uint32_t size, FPtr_compare func_compare)
void blib_qsort_ex(const byte_t *array, const uint32_t nelems, const uint32_t size, FPtr_compare_ex func_compare, const byte_t *data)
bool_t blib_bsearch(const byte_t *array, const byte_t *key, const uint32_t nelems, const uint32_t size, FPtr_compare func_compare, uint32_t *pos)
bool_t blib_bsearch_ex(const byte_t *array, const byte_t *key, const uint32_t nelems, const uint32_t size, FPtr_compare_ex func_compare, const byte_t *data, uint32_t *pos)
const char_t *blib_getenv(const char_t *name)

<comment>
void blib_atexit(void (*func)(void))
</comment>

void blib_abort(void)
void blib_exit(int code)
void blib_debug_break(void)

<comment>
oswindow.h
</comment>

OSWindow *oswindow_create(const uint32_t flags)
OSWindow *oswindow_managed(void *native_ptr)
void oswindow_destroy(OSWindow **window)
void oswindow_OnMoved(OSWindow *window, Listener *listener)
void oswindow_OnResize(OSWindow *window, Listener *listener)
void oswindow_OnClose(OSWindow *window, Listener *listener)
void oswindow_title(OSWindow *window, const char_t *text)
void oswindow_edited(OSWindow *window, const bool_t is_edited)
void oswindow_movable(OSWindow *window, const bool_t is_movable)
void oswindow_z_order(OSWindow *window, OSWindow *below_window)
void oswindow_alpha(OSWindow *window, const real32_t alpha)
void oswindow_enable_mouse_events(OSWindow *window, const bool_t enabled)
void oswindow_hotkey(OSWindow *window, const vkey_t key, const uint32_t modifiers, Listener *listener)
void oswindow_taborder(OSWindow *window, OSControl *control)
void oswindow_tabcycle(OSWindow *window, const bool_t cycle)
gui_focus_t oswindow_tabstop(OSWindow *window, const bool_t next)
gui_focus_t oswindow_focus(OSWindow *window, OSControl *control)
OSControl *oswindow_get_focus(const OSWindow *window)
gui_tab_t oswindow_info_focus(const OSWindow *window, void **next_ctrl)
void oswindow_attach_panel(OSWindow *window, OSPanel *panel)
void oswindow_detach_panel(OSWindow *window, OSPanel *panel)
void oswindow_attach_window(OSWindow *parent_window, OSWindow *child_window)
void oswindow_detach_window(OSWindow *parent_window, OSWindow *child_window)
void oswindow_launch(OSWindow *window, OSWindow *parent_window)
void oswindow_hide(OSWindow *window, OSWindow *parent_window)
uint32_t oswindow_launch_modal(OSWindow *window, OSWindow *parent_window)
void oswindow_stop_modal(OSWindow *window, const uint32_t return_value)
void oswindow_get_origin(const OSWindow *window, real32_t *x, real32_t *y)
void oswindow_origin(OSWindow *window, const real32_t x, const real32_t y)
void oswindow_get_size(const OSWindow *window, real32_t *width, real32_t *height)
void oswindow_size(OSWindow *window, const real32_t content_width, const real32_t content_height)
void oswindow_set_default_pushbutton(OSWindow *window, OSButton *button)
void oswindow_set_cursor(OSWindow *window, Cursor *cursor)
void oswindow_property(OSWindow *window, const gui_prop_t prop, const void *value)



<comment>
osview.h
</comment>

OSView *osview_create(const uint32_t flags)
void osview_destroy(OSView **view)
void osview_OnDraw(OSView *view, Listener *listener)
void osview_OnOverlay(OSView *view, Listener *listener)
void osview_OnEnter(OSView *view, Listener *listener)
void osview_OnExit(OSView *view, Listener *listener)
void osview_OnMoved(OSView *view, Listener *listener)
void osview_OnDown(OSView *view, Listener *listener)
void osview_OnUp(OSView *view, Listener *listener)
void osview_OnClick(OSView *view, Listener *listener)
void osview_OnDrag(OSView *view, Listener *listener)
void osview_OnWheel(OSView *view, Listener *listener)
void osview_OnKeyDown(OSView *view, Listener *listener)
void osview_OnKeyUp(OSView *view, Listener *listener)
void osview_OnFocus(OSView *view, Listener *listener)
void osview_OnResignFocus(OSView *view, Listener *listener)
void osview_OnAcceptFocus(OSView *view, Listener *listener)
void osview_OnScroll(OSView *view, Listener *listener)
void osview_scroll(OSView *view, const real32_t x, const real32_t y)
void osview_scroll_get(const OSView *view, real32_t *x, real32_t *y)
void osview_scroller_size(const OSView *view, real32_t *width, real32_t *height)
void osview_scroller_visible(OSView *view, const bool_t horizontal, const bool_t vertical)
void osview_content_size(OSView *view, const real32_t width, const real32_t height, const real32_t line_width, const real32_t line_height)
real32_t osview_scale_factor(const OSView *view)
void osview_set_need_display(OSView *view)
void *osview_get_native_view(const OSView *view)
void osview_attach(OSView *view, OSPanel *panel)
void osview_detach(OSView *view, OSPanel *panel)
void osview_visible(OSView *view, const bool_t visible)
void osview_enabled(OSView *view, const bool_t enabled)
void osview_size(const OSView *view, real32_t *width, real32_t *height)
void osview_origin(const OSView *view, real32_t *x, real32_t *y)
void osview_frame(OSView *view, const real32_t x, const real32_t y, const real32_t width, const real32_t height)

<comment>
ossubdown.h
</comment>

OSUpDown *osupdown_create(const uint32_t flags)
void osupdown_destroy(OSUpDown **updown)
void osupdown_OnClick(OSUpDown *updown, Listener *listener)
void osupdown_tooltip(OSUpDown *updown, const char_t *text)
void osupdown_attach(OSUpDown *updown, OSPanel *panel)
void osupdown_detach(OSUpDown *updown, OSPanel *panel)
void osupdown_visible(OSUpDown *updown, const bool_t visible)
void osupdown_enabled(OSUpDown *updown, const bool_t enabled)
void osupdown_size(const OSUpDown *updown, real32_t *width, real32_t *height)
void osupdown_origin(const OSUpDown *updown, real32_t *x, real32_t *y)
void osupdown_frame(OSUpDown *updown, const real32_t x, const real32_t y, const real32_t width, const real32_t height)

<comment>
ostext.h
</comment>

OSText *ostext_create(const uint32_t flags)
void ostext_destroy(OSText **view)
void ostext_OnFilter(OSText *view, Listener *listener)
void ostext_OnFocus(OSText *view, Listener *listener)
void ostext_insert_text(OSText *view, const char_t *text)
void ostext_set_text(OSText *view, const char_t *text)
void ostext_set_rtf(OSText *view, Stream *rtf_in)
void ostext_property(OSText *view, const gui_text_t prop, const void *value)
void ostext_editable(OSText *view, const bool_t is_editable)
const char_t *ostext_get_text(const OSText *view)
void ostext_scroller_visible(OSText *view, const bool_t horizontal, const bool_t vertical)
void ostext_set_need_display(OSText *view)
void ostext_clipboard(OSText *view, const clipboard_t clipboard)
void ostext_attach(OSText *view, OSPanel *panel)
void ostext_detach(OSText *view, OSPanel *panel)
void ostext_visible(OSText *view, const bool_t visible)
void ostext_enabled(OSText *view, const bool_t enabled)
void ostext_size(const OSText *view, real32_t *width, real32_t *height)
void ostext_origin(const OSText *view, real32_t *x, real32_t *y)
void ostext_frame(OSText *view, const real32_t x, const real32_t y, const real32_t width, const real32_t height)



<comment>
ossplit.h
</comment>

OSSplit *ossplit_create(const uint32_t flags)
void ossplit_destroy(OSSplit **view)
void ossplit_attach_control(OSSplit *view, OSControl *control)
void ossplit_detach_control(OSSplit *view, OSControl *control)
void ossplit_OnDrag(OSSplit *view, Listener *listener)
void ossplit_track_area(OSSplit *view, const real32_t x, const real32_t y, const real32_t width, const real32_t height)
void ossplit_attach(OSSplit *view, OSPanel *panel)
void ossplit_detach(OSSplit *view, OSPanel *panel)
void ossplit_visible(OSSplit *view, const bool_t is_visible)
void ossplit_enabled(OSSplit *view, const bool_t is_enabled)
void ossplit_size(const OSSplit *view, real32_t *width, real32_t *height)
void ossplit_origin(const OSSplit *view, real32_t *x, real32_t *y)
void ossplit_frame(OSSplit *view, const real32_t x, const real32_t y, const real32_t width, const real32_t height)

<comment>
osslider.h
</comment>

OSSlider *osslider_create(const uint32_t flags)
void osslider_destroy(OSSlider **slider)
void osslider_OnMoved(OSSlider *slider, Listener *listener)
void osslider_tooltip(OSSlider *slider, const char_t *text)
void osslider_tickmarks(OSSlider *slider, const uint32_t num_tickmarks, const bool_t tickmarks_at_left_top)
void osslider_position(OSSlider *slider, const real32_t position)
real32_t osslider_get_position(const OSSlider *slider)
void osslider_bounds(const OSSlider *slider, const real32_t length, const gui_size_t knob_size, real32_t *width, real32_t *height)
void osslider_attach(OSSlider *slider, OSPanel *panel)
void osslider_detach(OSSlider *slider, OSPanel *panel)
void osslider_visible(OSSlider *slider, const bool_t visible)
void osslider_enabled(OSSlider *slider, const bool_t enabled)
void osslider_size(const OSSlider *slider, real32_t *width, real32_t *height)
void osslider_origin(const OSSlider *slider, real32_t *x, real32_t *y)
void osslider_frame(OSSlider *slider, const real32_t x, const real32_t y, const real32_t width, const real32_t height)



<comment>
osprogress.h
</comment>

OSProgress *osprogress_create(const uint32_t flags)
void osprogress_destroy(OSProgress **progress)
void osprogress_position(OSProgress *progress, const real32_t position)
real32_t osprogress_thickness(const OSProgress *progress, const gui_size_t size)
void osprogress_attach(OSProgress *progress, OSPanel *panel)
void osprogress_detach(OSProgress *progress, OSPanel *panel)
void osprogress_visible(OSProgress *progress, const bool_t visible)
void osprogress_enabled(OSProgress *progress, const bool_t enabled)
void osprogress_size(const OSProgress *progress, real32_t *width, real32_t *height)
void osprogress_origin(const OSProgress *progress, real32_t *x, real32_t *y)
void osprogress_frame(OSProgress *progress, const real32_t x, const real32_t y, const real32_t width, const real32_t height)


<comment>
ospopup.h
</comment>


OSPopUp *ospopup_create(const uint32_t flags)
void ospopup_destroy(OSPopUp **popup)
void ospopup_OnSelect(OSPopUp *popup, Listener *listener)
void ospopup_elem(OSPopUp *popup, const ctrl_op_t op, const uint32_t index, const char_t *text, const Image *image)
void ospopup_tooltip(OSPopUp *popup, const char_t *text)
void ospopup_font(OSPopUp *popup, const Font *font)
void ospopup_list_height(OSPopUp *popup, const uint32_t num_elems)
void ospopup_selected(OSPopUp *popup, const uint32_t index)
uint32_t ospopup_get_selected(const OSPopUp *popup)
void ospopup_bounds(const OSPopUp *popup, const char_t *text, real32_t *width, real32_t *height)
void ospopup_attach(OSPopUp *popup, OSPanel *panel)
void ospopup_detach(OSPopUp *popup, OSPanel *panel)
void ospopup_visible(OSPopUp *popup, const bool_t visible)
void ospopup_enabled(OSPopUp *popup, const bool_t enabled)
void ospopup_size(const OSPopUp *popup, real32_t *width, real32_t *height)
void ospopup_origin(const OSPopUp *popup, real32_t *x, real32_t *y)
void ospopup_frame(OSPopUp *popup, const real32_t x, const real32_t y, const real32_t width, const real32_t height)



<comment>
ospanel.h
</comment>


OSPanel *ospanel_create(const uint32_t flags)
void ospanel_destroy(OSPanel **panel)
void ospanel_area(OSPanel *panel, void *obj, const color_t bgcolor, const color_t skcolor, const real32_t x, const real32_t y, const real32_t width, const real32_t height)
void ospanel_scroller_size(const OSPanel *panel, real32_t *width, real32_t *height)
void ospanel_content_size(OSPanel *panel, const real32_t width, const real32_t height, const real32_t line_width, const real32_t line_height)
void ospanel_display(OSPanel *panel)
void ospanel_attach(OSPanel *panel, OSPanel *parent_panel)
void ospanel_detach(OSPanel *panel, OSPanel *parent_panel)
void ospanel_visible(OSPanel *panel, const bool_t visible)
void ospanel_enabled(OSPanel *panel, const bool_t enabled)
void ospanel_size(const OSPanel *panel, real32_t *width, real32_t *height)
void ospanel_origin(const OSPanel *panel, real32_t *x, real32_t *y)
void ospanel_frame(OSPanel *panel, const real32_t x, const real32_t y, const real32_t width, const real32_t height)


<comment>
osmenuitem.h
</comment>

OSMenuItem *osmenuitem_create(const uint32_t flags)
void osmenuitem_destroy(OSMenuItem **item)
void osmenuitem_OnClick(OSMenuItem *item, Listener *listener)
void osmenuitem_enabled(OSMenuItem *item, const bool_t enabled)
void osmenuitem_visible(OSMenuItem *item, const bool_t visible)
void osmenuitem_text(OSMenuItem *item, const char_t *text)
void osmenuitem_image(OSMenuItem *item, const Image *image)
void osmenuitem_key(OSMenuItem *item, const uint32_t key, const uint32_t modifiers)
void osmenuitem_state(OSMenuItem *item, const gui_state_t state)
void osmenuitem_submenu(OSMenuItem *item, OSMenu *menu)
void osmenuitem_unset_submenu(OSMenuItem *item, OSMenu *menu)


<comment>
osmenu.h
</comment>


OSMenu *osmenu_create(const uint32_t flags)
void osmenu_destroy(OSMenu **menu)
void osmenu_add_item(OSMenu *menu, OSMenuItem *item)
void osmenu_delete_item(OSMenu *menu, OSMenuItem *item)
void osmenu_launch(OSMenu *menu, OSWindow *window, const real32_t x, const real32_t y)
void osmenu_hide(OSMenu *menu)


<comment>
oslabel.h
</comment>


OSLabel *oslabel_create(const uint32_t flags)
void oslabel_destroy(OSLabel **label)
void oslabel_OnClick(OSLabel *label, Listener *listener)
void oslabel_OnEnter(OSLabel *label, Listener *listener)
void oslabel_OnExit(OSLabel *label, Listener *listener)
void oslabel_text(OSLabel *label, const char_t *text)
void oslabel_font(OSLabel *label, const Font *font)
void oslabel_align(OSLabel *label, const align_t align)
void oslabel_ellipsis(OSLabel *label, const ellipsis_t ellipsis)
void oslabel_color(OSLabel *label, const color_t color)
void oslabel_bgcolor(OSLabel *label, const color_t color)
void oslabel_bounds(const OSLabel *label, const char_t *text, const real32_t refwidth, real32_t *width, real32_t *height)
void oslabel_attach(OSLabel *label, OSPanel *panel)
void oslabel_detach(OSLabel *label, OSPanel *panel)
void oslabel_visible(OSLabel *label, const bool_t visible)
void oslabel_enabled(OSLabel *label, const bool_t enabled)
void oslabel_size(const OSLabel *label, real32_t *width, real32_t *height)
void oslabel_origin(const OSLabel *label, real32_t *x, real32_t *y)
void oslabel_frame(OSLabel *label, const real32_t x, const real32_t y, const real32_t width, const real32_t height)

<comment>
osguictx.h
</comment>

GuiCtx *osguictx(void)

<comment>
osgui.h
</comment>


void osgui_start(void)
void osgui_finish(void)
void osgui_set_menubar(OSMenu *menu, OSWindow *window)
void osgui_unset_menubar(OSMenu *menu, OSWindow *window)
void osgui_redraw_menubar(void)
void osgui_message_loop(void)
bool_t osgui_is_initialized(void)
void osgui_initialize(void)
void osgui_terminate(void)
void osgui_set_app(void *app, void *icon)

<comment>
osglobals.h
</comment>


device_t osglobals_device(const void *non_used)
color_t osglobals_color(const syscolor_t *color)
void osglobals_resolution(const void *non_used, real32_t *width, real32_t *height)
void osglobals_mouse_position(const void *non_used, real32_t *x, real32_t *y)
Cursor *osglobals_cursor(const gui_cursor_t cursor, const Image *image, const real32_t hot_x, const real32_t hot_y)
void osglobals_cursor_destroy(Cursor **cursor)
void osglobals_value(const uint32_t index, void *value)
void osglobals_transitions(void *nonused, const real64_t prtime, const real64_t crtime)
void osglobals_OnIdle(void *nonused, Listener *listener)

<comment>
void osglobals_theme_changed(void)
</comment>


<comment>
osedit.h
</comment>


OSEdit *osedit_create(const uint32_t flags)
void osedit_destroy(OSEdit **edit)
void osedit_OnFilter(OSEdit *edit, Listener *listener)
void osedit_OnChange(OSEdit *edit, Listener *listener)
void osedit_OnFocus(OSEdit *edit, Listener *listener)
void osedit_text(OSEdit *edit, const char_t *text)
void osedit_tooltip(OSEdit *edit, const char_t *text)
void osedit_font(OSEdit *edit, const Font *font)
void osedit_align(OSEdit *edit, const align_t align)
void osedit_passmode(OSEdit *edit, const bool_t passmode)
void osedit_editable(OSEdit *edit, const bool_t is_editable)
void osedit_autoselect(OSEdit *edit, const bool_t autoselect)
void osedit_select(OSEdit *edit, const int32_t start, const int32_t end)
void osedit_color(OSEdit *edit, const color_t color)
void osedit_bgcolor(OSEdit *edit, const color_t color)
void osedit_vpadding(OSEdit *edit, const real32_t padding)
void osedit_bounds(const OSEdit *edit, const real32_t refwidth, const uint32_t lines, real32_t *width, real32_t *height)
void osedit_clipboard(OSEdit *edit, const clipboard_t clipboard)
void osedit_attach(OSEdit *edit, OSPanel *panel)
void osedit_detach(OSEdit *edit, OSPanel *panel)
void osedit_visible(OSEdit *edit, const bool_t visible)
void osedit_enabled(OSEdit *edit, const bool_t enabled)
void osedit_size(const OSEdit *edit, real32_t *width, real32_t *height)
void osedit_origin(const OSEdit *edit, real32_t *x, real32_t *y)
void osedit_frame(OSEdit *edit, const real32_t x, const real32_t y, const real32_t width, const real32_t height)


<comment>
osdrawctrl.h
</comment>


Font *osdrawctrl_font(const DCtx *ctx)
uint32_t osdrawctrl_row_padding(const DCtx *ctx)
uint32_t osdrawctrl_check_width(const DCtx *ctx)
uint32_t osdrawctrl_check_height(const DCtx *ctx)
ctrl_msel_t osdrawctrl_multisel(const DCtx *ctx, const vkey_t key)
void osdrawctrl_clear(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const enum_t nonused)
void osdrawctrl_header(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const ctrl_state_t state)
void osdrawctrl_indicator(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const indicator_t indicator)
void osdrawctrl_fill(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const ctrl_state_t state)
void osdrawctrl_focus(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const ctrl_state_t state)
void osdrawctrl_line(DCtx *ctx, const int32_t x0, const int32_t y0, const int32_t x1, const int32_t y1)
void osdrawctrl_text(DCtx *ctx, const char_t *text, const int32_t x, const int32_t y, const ctrl_state_t state)
void osdrawctrl_image(DCtx *ctx, const Image *image, const int32_t x, const int32_t y, const ctrl_state_t state)
void osdrawctrl_checkbox(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const ctrl_state_t state)
void osdrawctrl_uncheckbox(DCtx *ctx, const int32_t x, const int32_t y, const uint32_t width, const uint32_t height, const ctrl_state_t state)


<comment>
oscomwin.h
</comment>


const char_t *oscomwin_file(OSWindow *parent, const char_t **ftypes, const uint32_t size, const char_t *start_dir, const bool_t open)
void oscomwin_color(OSWindow *parent, const char_t *title, const real32_t x, const real32_t y, const align_t halign, const align_t valign, const color_t current, color_t *colors, const uint32_t n, Listener *OnChange)

<comment>
oscombo.h
</comment>


OSCombo *oscombo_create(const uint32_t flags)
void oscombo_destroy(OSCombo **combo)
void oscombo_OnFilter(OSCombo *combo, Listener *listener)
void oscombo_OnChange(OSCombo *combo, Listener *listener)
void oscombo_OnFocus(OSCombo *combo, Listener *listener)
void oscombo_OnSelect(OSCombo *combo, Listener *listener)
void oscombo_text(OSCombo *combo, const char_t *text)
void oscombo_tooltip(OSCombo *combo, const char_t *text)
void oscombo_font(OSCombo *combo, const Font *font)
void oscombo_align(OSCombo *combo, const align_t align)
void oscombo_passmode(OSCombo *combo, const bool_t passmode)
void oscombo_color(OSCombo *combo, const color_t color)
void oscombo_bgcolor(OSCombo *combo, const color_t color)
void oscombo_elem(OSCombo *combo, const ctrl_op_t op, const uint32_t index, const char_t *text, const Image *image)
void oscombo_selected(OSCombo *combo, const uint32_t index)
uint32_t oscombo_get_selected(const OSCombo *combo)
void oscombo_bounds(const OSCombo *combo, const real32_t refwidth, real32_t *width, real32_t *height)
void oscombo_attach(OSCombo *combo, OSPanel *panel)
void oscombo_detach(OSCombo *combo, OSPanel *panel)
void oscombo_visible(OSCombo *combo, const bool_t visible)
void oscombo_enabled(OSCombo *combo, const bool_t enabled)
void oscombo_size(const OSCombo *combo, real32_t *width, real32_t *height)
void oscombo_origin(const OSCombo *combo, real32_t *x, real32_t *y)
void oscombo_frame(OSCombo *combo, const real32_t x, const real32_t y, const real32_t width, const real32_t height)


<comment>
osbutton.h
</comment>


OSButton *osbutton_create(const uint32_t flags)
void osbutton_destroy(OSButton **button)
void osbutton_OnClick(OSButton *button, Listener *listener)
void osbutton_text(OSButton *button, const char_t *text)
void osbutton_tooltip(OSButton *button, const char_t *text)
void osbutton_font(OSButton *button, const Font *font)
void osbutton_align(OSButton *button, const align_t align)
void osbutton_image(OSButton *button, const Image *image)
void osbutton_state(OSButton *button, const gui_state_t state)
gui_state_t osbutton_get_state(const OSButton *button)
void osbutton_vpadding(OSButton *button, const real32_t padding)
void osbutton_bounds(const OSButton *button, const char_t *text, const real32_t refwidth, const real32_t refheight, real32_t *width, real32_t *height)
void osbutton_attach(OSButton *button, OSPanel *panel)
void osbutton_detach(OSButton *button, OSPanel *panel)
void osbutton_visible(OSButton *button, const bool_t visible)
void osbutton_enabled(OSButton *button, const bool_t enabled)
void osbutton_size(const OSButton *button, real32_t *width, real32_t *height)
void osbutton_origin(const OSButton *button, real32_t *x, real32_t *y)
void osbutton_frame(OSButton *button, const real32_t x, const real32_t y, const real32_t width, const real32_t height)




<comment>
osbs.h
</comment>

void osbs_start(void)
void osbs_finish(void)
platform_t osbs_platform(void)
win_t osbs_windows(void)
endian_t osbs_endian(void)


<comment>
log.h
</comment>

<comment>
uint32_t log_printf(const char_t *format, ...) __PRINTF(1, 2)
</comment>

void log_output(const bool_t std, const bool_t err)
void log_file(const char_t *pathname)
const char_t *log_get_file(void)

<comment>
dlib.h
</comment>

DLib *dlib_open(const char_t *path, const char_t *libname)
void dlib_close(DLib **dlib)
FPtr_libproc dlib_proc_imp(DLib *dlib, const char_t *procname)
void *dlib_var_imp(DLib *dlib, const char_t *varname)

<comment>
btime.h
</comment>

uint64_t btime_now(void)
void btime_date(Date *date)
uint64_t btime_to_micro(const Date *date)
void btime_to_date(const uint64_t micro, Date *date)

<comment>
bthread.h
</comment>

Thread *bthread_create_imp(FPtr_thread_main thmain, void *data)
int bthread_current_id(void)
void bthread_close(Thread **thread)
bool_t bthread_cancel(Thread *thread)
uint32_t bthread_wait(Thread *thread)
bool_t bthread_finish(Thread *thread, uint32_t *code)
void bthread_sleep(const uint32_t milliseconds)

<comment>
bsocket.h
</comment>


Socket *bsocket_connect(const uint32_t ip, const uint16_t port, const uint32_t timeout_ms, serror_t *error)
Socket *bsocket_server(const uint16_t port, const uint32_t max_connect, serror_t *error)
Socket *bsocket_accept(Socket *socket, const uint32_t timeout_ms, serror_t *error)
void bsocket_close(Socket **socket)
void bsocket_local_ip(Socket *socket, uint32_t *ip, uint16_t *port)
void bsocket_remote_ip(Socket *socket, uint32_t *ip, uint16_t *port)
void bsocket_read_timeout(Socket *socket, const uint32_t timeout_ms)
void bsocket_write_timeout(Socket *socket, const uint32_t timeout_ms)
bool_t bsocket_read(Socket *socket, byte_t *data, const uint32_t size, uint32_t *rsize, serror_t *error)
bool_t bsocket_write(Socket *socket, const byte_t *data, const uint32_t size, uint32_t *wsize, serror_t *error)
uint32_t bsocket_url_ip(const char_t *url, serror_t *error)
uint32_t bsocket_str_ip(const char_t *ip)
const char_t *bsocket_host_name(char_t *buffer, const uint32_t size)
const char_t *bsocket_host_name_ip(const uint32_t ip, char_t *buffer, const uint32_t size)
const char_t *bsocket_ip_str(const uint32_t ip)
void bsocket_hton2(byte_t *dest, const byte_t *src)
void bsocket_hton4(byte_t *dest, const byte_t *src)
void bsocket_hton8(byte_t *dest, const byte_t *src)
void bsocket_ntoh2(byte_t *dest, const byte_t *src)
void bsocket_ntoh4(byte_t *dest, const byte_t *src)
void bsocket_ntoh8(byte_t *dest, const byte_t *src)

<comment>
bproc.h
</comment>


Proc *bproc_exec(const char_t *command, perror_t *error)
void bproc_close(Proc **proc)
bool_t bproc_cancel(Proc *proc)
uint32_t bproc_wait(Proc *proc)
bool_t bproc_finish(Proc *proc, uint32_t *code)
bool_t bproc_read(Proc *proc, byte_t *data, const uint32_t size, uint32_t *rsize, perror_t *error)
bool_t bproc_eread(Proc *proc, byte_t *data, const uint32_t size, uint32_t *rsize, perror_t *error)
bool_t bproc_write(Proc *proc, const byte_t *data, const uint32_t size, uint32_t *wsize, perror_t *error)
bool_t bproc_read_close(Proc *proc)
bool_t bproc_eread_close(Proc *proc)
bool_t bproc_write_close(Proc *proc)
void bproc_exit(const uint32_t code)

<comment>
bmutex.h
</comment>


Mutex *bmutex_create(void)
void bmutex_close(Mutex **mutex)
void bmutex_lock(Mutex *mutex)
void bmutex_unlock(Mutex *mutex)



<comment>
bfile.h
</comment>


uint32_t bfile_dir_work(char_t *pathname, const uint32_t size)
bool_t bfile_dir_set_work(const char_t *pathname, ferror_t *error)
uint32_t bfile_dir_home(char_t *pathname, const uint32_t size)
uint32_t bfile_dir_data(char_t *pathname, const uint32_t size)
uint32_t bfile_dir_exec(char_t *pathname, const uint32_t size)
bool_t bfile_dir_create(const char_t *pathname, ferror_t *error)
Dir *bfile_dir_open(const char_t *pathname, ferror_t *error)
void bfile_dir_close(Dir **dir)
bool_t bfile_dir_get(Dir *dir, char_t *name, const uint32_t size, file_type_t *type, uint64_t *fsize, Date *updated, ferror_t *error)
bool_t bfile_dir_delete(const char_t *pathname, ferror_t *error)
File *bfile_create(const char_t *pathname, ferror_t *error)
File *bfile_open(const char_t *pathname, const file_mode_t mode, ferror_t *error)
void bfile_close(File **file)
bool_t bfile_lstat(const char_t *pathname, file_type_t *type, uint64_t *size, Date *updated, ferror_t *error)
bool_t bfile_fstat(const File *file, file_type_t *type, uint64_t *size, Date *updated, ferror_t *error)
bool_t bfile_read(File *file, byte_t *data, const uint32_t size, uint32_t *rsize, ferror_t *error)
bool_t bfile_write(File *file, const byte_t *data, const uint32_t size, uint32_t *wsize, ferror_t *error)
bool_t bfile_seek(File *file, const int64_t offset, const file_seek_t whence, ferror_t *error)
uint64_t bfile_pos(const File *file)
bool_t bfile_delete(const char_t *pathname, ferror_t *error)

<comment>
osapp.h
</comment>


void osapp_finish(void)
void osapp_task_imp(void *data, const real32_t updtime, FPtr_task_main func_task_main, FPtr_task_update func_task_update, FPtr_task_end func_task_end)
void osapp_menubar(Menu *menu, Window *window)
void osapp_open_url(const char_t *url)

<comment>
url.h
</comment>


Url *url_parse(const char_t *url)
void url_destroy(Url **url)
const char_t *url_scheme(const Url *url)
const char_t *url_user(const Url *url)
const char_t *url_pass(const Url *url)
const char_t *url_host(const Url *url)
const char_t *url_path(const Url *url)
const char_t *url_params(const Url *url)
const char_t *url_query(const Url *url)
const char_t *url_fragment(const Url *url)
String *url_resource(const Url *url)
uint16_t url_port(const Url *url)

<comment>
json.h
</comment>

void *json_read_imp(Stream *stm, const JsonOpts *opts, const char_t *type)
void json_write_imp(Stream *stm, const void *data, const JsonOpts *opts, const char_t *type)
void json_destroy_imp(void **data, const char_t *type)
void json_destopt_imp(void **data, const char_t *type)



