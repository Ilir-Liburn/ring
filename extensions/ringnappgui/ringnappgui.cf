<nodllstartup>

<code>

#define _WINDOWS 1

#include "inet/inet.h"
#include "osapp/osmain.h"
#include "osgui/osgui.h"
#include "nappgui.h"

#define String RingString
#include "ring.h"

</code>

<comment>
unicode.h
</comment>

uint32_t unicode_convers(const char_t *from_str, char_t *to_str, const unicode_t from, const unicode_t to, const uint32_t osize)
uint32_t unicode_convers_n(const char_t *from_str, char_t *to_str, const unicode_t from, const unicode_t to, const uint32_t isize, const uint32_t osize)
uint32_t unicode_convers_nbytes(const char_t *str, const unicode_t from, const unicode_t to)

<comment>
uint32_t unicode_convers_nbytes_n(const char_t *str, const uint32_t isize, const unicode_t from, const unicode_t to)
</comment>

uint32_t unicode_nbytes(const char_t *str, const unicode_t format)
uint32_t unicode_nchars(const char_t *str, const unicode_t format)
uint32_t unicode_to_u32(const char_t *str, const unicode_t format)
uint32_t unicode_to_u32b(const char_t *str, const unicode_t format, uint32_t *bytes)
uint32_t unicode_to_char(const uint32_t codepoint, char_t *str, const unicode_t format)
bool_t unicode_valid_str(const char_t *str, const unicode_t format)
bool_t unicode_valid_str_n(const char_t *str, const uint32_t size, const unicode_t format)
bool_t unicode_valid(const uint32_t codepoint)
const char_t *unicode_next(const char_t *str, const unicode_t format)
const char_t *unicode_back(const char_t *str, const unicode_t format)
bool_t unicode_isascii(const uint32_t codepoint)
bool_t unicode_isalnum(const uint32_t codepoint)
bool_t unicode_isalpha(const uint32_t codepoint)
bool_t unicode_iscntrl(const uint32_t codepoint)
bool_t unicode_isdigit(const uint32_t codepoint)
bool_t unicode_isgraph(const uint32_t codepoint)
bool_t unicode_isprint(const uint32_t codepoint)
bool_t unicode_ispunct(const uint32_t codepoint)
bool_t unicode_isspace(const uint32_t codepoint)
bool_t unicode_isxdigit(const uint32_t codepoint)
bool_t unicode_islower(const uint32_t codepoint)
bool_t unicode_isupper(const uint32_t codepoint)
uint32_t unicode_tolower(const uint32_t codepoint)
uint32_t unicode_toupper(const uint32_t codepoint)


<comment>
types.h
</comment>

uint32_t min_u32(const uint32_t v1, const uint32_t v2)
real32_t min_r32(const real32_t v1, const real32_t v2)
real64_t min_r64(const real64_t v1, const real64_t v2)
uint32_t max_u32(const uint32_t v1, const uint32_t v2)
real32_t max_r32(const real32_t v1, const real32_t v2)
real64_t max_r64(const real64_t v1, const real64_t v2)
real32_t abs_r32(const real32_t v)
uint8_t to_u8(const uint32_t v)


<comment>
sewer.h
</comment>

void sewer_start(void)
void sewer_finish(void)
uint32_t sewer_nappgui_major(void)
uint32_t sewer_nappgui_minor(void)
uint32_t sewer_nappgui_patch(void)
uint32_t sewer_nappgui_build(void)
const char_t *sewer_nappgui_version(const bool_t full)



<comment>
ptr.h
</comment>

void *ptr_dget_imp(void **dptr)
void *ptr_dget_no_null_imp(void **dptr)
void ptr_destopt_imp(void **dptr, FPtr_destroy func_destroy)
void *ptr_copyopt_imp(void *ptr, FPtr_copy func_copy)


<comment>
cassert.h
</comment>

void cassert_set_func(void *data, FPtr_assert func_assert)
void cassert_imp(bool_t cond, const char_t *detail, const char_t *file, const uint32_t line)
void cassert_fatal_imp(bool_t cond, const char_t *detail, const char_t *file, const uint32_t line)
void cassert_no_null_imp(void *ptr, const char_t *detail, const char_t *file, const uint32_t line)
<comment>
void cassert_no_nullf_imp(void (*ptr)(void), const char_t *detail, const char_t *file, const uint32_t line)
</comment>
void cassert_default_imp(const char_t *file, const uint32_t line)


<comment>
bstd.h
</comment>

<comment>
uint32_t bstd_sprintf(char_t *str, const uint32_t size, const char_t *format, ...) __PRINTF(3, 4)
uint32_t bstd_printf(const char_t *format, ...) __PRINTF(1, 2)
uint32_t bstd_eprintf(const char_t *format, ...) __PRINTF(1, 2)
</comment>

uint32_t bstd_vsprintf(char_t *str, const uint32_t size, const char_t *format, va_list args)
uint32_t bstd_writef(const char_t *str)
uint32_t bstd_ewritef(const char_t *str)
bool_t bstd_read(byte_t *data, const uint32_t size, uint32_t *rsize)
bool_t bstd_write(const byte_t *data, const uint32_t size, uint32_t *wsize)
bool_t bstd_ewrite(const byte_t *data, const uint32_t size, uint32_t *wsize)

<comment>
bmem.h
</comment>

byte_t *bmem_aligned_malloc(const uint32_t size, const uint32_t align)
byte_t *bmem_aligned_realloc(byte_t *mem, const uint32_t size, const uint32_t new_size, const uint32_t align)
void bmem_free(byte_t *mem)
void bmem_set1(byte_t *dest, const uint32_t size, const byte_t mask)
void bmem_set4(byte_t *dest, const uint32_t size, const byte_t *mask)
void bmem_set8(byte_t *dest, const uint32_t size, const byte_t *mask)
void bmem_set16(byte_t *dest, const uint32_t size, const byte_t *mask)
int bmem_cmp(const byte_t *mem1, const byte_t *mem2, const uint32_t size)
bool_t bmem_is_zero(const byte_t *mem, const uint32_t size)
void bmem_set_zero(byte_t *dest, const uint32_t size)
void bmem_copy(byte_t *dest, const byte_t *src, const uint32_t size)
void bmem_move(byte_t *dest, const byte_t *src, const uint32_t size)
bool_t bmem_overlaps(const byte_t *mem1, const byte_t *mem2, const uint32_t size1, const uint32_t size2)
void bmem_rev(byte_t *mem, const uint32_t size)
void bmem_rev2(byte_t *mem)
void bmem_rev4(byte_t *mem)
void bmem_rev8(byte_t *mem)
void bmem_revcopy(byte_t *dest, const byte_t *src, const uint32_t size)
void bmem_rev_elems_imp(byte_t *data, const uint32_t num_elems, const uint32_t elem_size)
void bmem_swap(byte_t *mem1, byte_t *mem2, const uint32_t size)
void bmem_shuffle(byte_t *mem, const uint32_t size, const uint32_t esize)


