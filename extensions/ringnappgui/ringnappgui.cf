<nodllstartup>

<code>

#define _WINDOWS 1

#include "inet/inet.h"
#include "osapp/osmain.h"
#include "osgui/osgui.h"
#include "nappgui.h"

#define String RingString
#include "ring.h"

</code>

<comment>
unicode.h
</comment>

uint32_t unicode_convers(const char_t *from_str, char_t *to_str, const unicode_t from, const unicode_t to, const uint32_t osize)
uint32_t unicode_convers_n(const char_t *from_str, char_t *to_str, const unicode_t from, const unicode_t to, const uint32_t isize, const uint32_t osize)
uint32_t unicode_convers_nbytes(const char_t *str, const unicode_t from, const unicode_t to)

<comment>
uint32_t unicode_convers_nbytes_n(const char_t *str, const uint32_t isize, const unicode_t from, const unicode_t to)
</comment>

uint32_t unicode_nbytes(const char_t *str, const unicode_t format)
uint32_t unicode_nchars(const char_t *str, const unicode_t format)
uint32_t unicode_to_u32(const char_t *str, const unicode_t format)
uint32_t unicode_to_u32b(const char_t *str, const unicode_t format, uint32_t *bytes)
uint32_t unicode_to_char(const uint32_t codepoint, char_t *str, const unicode_t format)
bool_t unicode_valid_str(const char_t *str, const unicode_t format)
bool_t unicode_valid_str_n(const char_t *str, const uint32_t size, const unicode_t format)
bool_t unicode_valid(const uint32_t codepoint)
const char_t *unicode_next(const char_t *str, const unicode_t format)
const char_t *unicode_back(const char_t *str, const unicode_t format)
bool_t unicode_isascii(const uint32_t codepoint)
bool_t unicode_isalnum(const uint32_t codepoint)
bool_t unicode_isalpha(const uint32_t codepoint)
bool_t unicode_iscntrl(const uint32_t codepoint)
bool_t unicode_isdigit(const uint32_t codepoint)
bool_t unicode_isgraph(const uint32_t codepoint)
bool_t unicode_isprint(const uint32_t codepoint)
bool_t unicode_ispunct(const uint32_t codepoint)
bool_t unicode_isspace(const uint32_t codepoint)
bool_t unicode_isxdigit(const uint32_t codepoint)
bool_t unicode_islower(const uint32_t codepoint)
bool_t unicode_isupper(const uint32_t codepoint)
uint32_t unicode_tolower(const uint32_t codepoint)
uint32_t unicode_toupper(const uint32_t codepoint)


<comment>
types.h
</comment>

uint32_t min_u32(const uint32_t v1, const uint32_t v2)
real32_t min_r32(const real32_t v1, const real32_t v2)
real64_t min_r64(const real64_t v1, const real64_t v2)
uint32_t max_u32(const uint32_t v1, const uint32_t v2)
real32_t max_r32(const real32_t v1, const real32_t v2)
real64_t max_r64(const real64_t v1, const real64_t v2)
real32_t abs_r32(const real32_t v)
uint8_t to_u8(const uint32_t v)


<comment>
sewer.h
</comment>

void sewer_start(void)
void sewer_finish(void)
uint32_t sewer_nappgui_major(void)
uint32_t sewer_nappgui_minor(void)
uint32_t sewer_nappgui_patch(void)
uint32_t sewer_nappgui_build(void)
const char_t *sewer_nappgui_version(const bool_t full)



<comment>
ptr.h
</comment>

void *ptr_dget_imp(void **dptr)
void *ptr_dget_no_null_imp(void **dptr)
void ptr_destopt_imp(void **dptr, FPtr_destroy func_destroy)
void *ptr_copyopt_imp(void *ptr, FPtr_copy func_copy)


<comment>
cassert.h
</comment>

void cassert_set_func(void *data, FPtr_assert func_assert)
void cassert_imp(bool_t cond, const char_t *detail, const char_t *file, const uint32_t line)
void cassert_fatal_imp(bool_t cond, const char_t *detail, const char_t *file, const uint32_t line)
void cassert_no_null_imp(void *ptr, const char_t *detail, const char_t *file, const uint32_t line)
<comment>
void cassert_no_nullf_imp(void (*ptr)(void), const char_t *detail, const char_t *file, const uint32_t line)
</comment>
void cassert_default_imp(const char_t *file, const uint32_t line)


<comment>
bstd.h
</comment>

<comment>
uint32_t bstd_sprintf(char_t *str, const uint32_t size, const char_t *format, ...) __PRINTF(3, 4)
uint32_t bstd_printf(const char_t *format, ...) __PRINTF(1, 2)
uint32_t bstd_eprintf(const char_t *format, ...) __PRINTF(1, 2)
</comment>

uint32_t bstd_vsprintf(char_t *str, const uint32_t size, const char_t *format, va_list args)
uint32_t bstd_writef(const char_t *str)
uint32_t bstd_ewritef(const char_t *str)
bool_t bstd_read(byte_t *data, const uint32_t size, uint32_t *rsize)
bool_t bstd_write(const byte_t *data, const uint32_t size, uint32_t *wsize)
bool_t bstd_ewrite(const byte_t *data, const uint32_t size, uint32_t *wsize)

<comment>
bmem.h
</comment>

byte_t *bmem_aligned_malloc(const uint32_t size, const uint32_t align)
byte_t *bmem_aligned_realloc(byte_t *mem, const uint32_t size, const uint32_t new_size, const uint32_t align)
void bmem_free(byte_t *mem)
void bmem_set1(byte_t *dest, const uint32_t size, const byte_t mask)
void bmem_set4(byte_t *dest, const uint32_t size, const byte_t *mask)
void bmem_set8(byte_t *dest, const uint32_t size, const byte_t *mask)
void bmem_set16(byte_t *dest, const uint32_t size, const byte_t *mask)
int bmem_cmp(const byte_t *mem1, const byte_t *mem2, const uint32_t size)
bool_t bmem_is_zero(const byte_t *mem, const uint32_t size)
void bmem_set_zero(byte_t *dest, const uint32_t size)
void bmem_copy(byte_t *dest, const byte_t *src, const uint32_t size)
void bmem_move(byte_t *dest, const byte_t *src, const uint32_t size)
bool_t bmem_overlaps(const byte_t *mem1, const byte_t *mem2, const uint32_t size1, const uint32_t size2)
void bmem_rev(byte_t *mem, const uint32_t size)
void bmem_rev2(byte_t *mem)
void bmem_rev4(byte_t *mem)
void bmem_rev8(byte_t *mem)
void bmem_revcopy(byte_t *dest, const byte_t *src, const uint32_t size)
void bmem_rev_elems_imp(byte_t *data, const uint32_t num_elems, const uint32_t elem_size)
void bmem_swap(byte_t *mem1, byte_t *mem2, const uint32_t size)
void bmem_shuffle(byte_t *mem, const uint32_t size, const uint32_t esize)


<comment>
bmath.h
</comment>

real32_t bmath_cosf(const real32_t angle)
real64_t bmath_cosd(const real64_t angle)
real32_t bmath_sinf(const real32_t angle)
real64_t bmath_sind(const real64_t angle)
real32_t bmath_tanf(const real32_t angle)
real64_t bmath_tand(const real64_t angle)
real32_t bmath_acosf(const real32_t cos)
real64_t bmath_acosd(const real64_t cos)
real32_t bmath_asinf(const real32_t sin)
real64_t bmath_asind(const real64_t sin)
real32_t bmath_atan2f(const real32_t y, const real32_t x)
real64_t bmath_atan2d(const real64_t y, const real64_t x)
real32_t bmath_norm_anglef(const real32_t a)
real64_t bmath_norm_angled(const real64_t a)
real32_t bmath_sqrtf(const real32_t value)
real64_t bmath_sqrtd(const real64_t value)
real32_t bmath_isqrtf(const real32_t value)
real64_t bmath_isqrtd(const real64_t value)
real32_t bmath_logf(const real32_t value)
real64_t bmath_logd(const real64_t value)
real32_t bmath_log10f(const real32_t value)
real64_t bmath_log10d(const real64_t value)
real32_t bmath_expf(const real32_t value)
real64_t bmath_expd(const real64_t value)
real32_t bmath_powf(const real32_t base, const real32_t exponent)
real64_t bmath_powd(const real64_t base, const real64_t exponent)
real32_t bmath_absf(const real32_t value)
real64_t bmath_absd(const real64_t value)
real32_t bmath_maxf(const real32_t value1, const real32_t value2)
real64_t bmath_maxd(const real64_t value1, const real64_t value2)
real32_t bmath_minf(const real32_t value1, const real32_t value2)
real64_t bmath_mind(const real64_t value1, const real64_t value2)
real32_t bmath_clampf(const real32_t value, const real32_t min, const real32_t max)
real64_t bmath_clampd(const real64_t value, const real64_t min, const real64_t max)
real32_t bmath_modf(const real32_t num, const real32_t den)
real64_t bmath_modd(const real64_t num, const real64_t den)
real32_t bmath_modff(const real32_t value, real32_t *intpart)
real64_t bmath_modfd(const real64_t value, real64_t *intpart)
uint32_t bmath_precf(const real32_t value)
uint32_t bmath_precd(const real64_t value)
real32_t bmath_roundf(const real32_t value)
real64_t bmath_roundd(const real64_t value)
real32_t bmath_round_stepf(const real32_t value, const real32_t step)
real64_t bmath_round_stepd(const real64_t value, const real64_t step)
real32_t bmath_floorf(const real32_t value)
real64_t bmath_floord(const real64_t value)
real32_t bmath_ceilf(const real32_t value)
real64_t bmath_ceild(const real64_t value)
void bmath_rand_seed(const uint32_t seed)
real32_t bmath_randf(const real32_t from, const real32_t to)
real64_t bmath_randd(const real64_t from, const real64_t to)
uint32_t bmath_randi(const uint32_t from, const uint32_t to)
REnv *bmath_rand_env(const uint32_t seed)
void bmath_rand_destroy(REnv **env)
real32_t bmath_rand_mtf(REnv *env, const real32_t from, const real32_t to)
real64_t bmath_rand_mtd(REnv *env, const real64_t from, const real64_t to)
uint32_t bmath_rand_mti(REnv *env, const uint32_t from, const uint32_t to)


<comment>
blib.h
</comment>

uint32_t blib_strlen(const char_t *str)
char_t *blib_strstr(const char_t *str, const char_t *substr)
void blib_strcpy(char_t *dest, const uint32_t size, const char_t *src)
void blib_strncpy(char_t *dest, const uint32_t size, const char_t *src, const uint32_t n)
void blib_strcat(char_t *dest, const uint32_t size, const char_t *src)
int blib_strcmp(const char_t *str1, const char_t *str2)
int blib_strncmp(const char_t *str1, const char_t *str2, const uint32_t n)
uint32_t blib_strftime(char_t *dest, const uint32_t size, const char_t *format, const int16_t year, const uint8_t month, const uint8_t mday, const uint8_t wday, const uint8_t hour, const uint8_t minute, const uint8_t second)
int64_t blib_strtol(const char_t *str, char_t **endptr, uint32_t base, bool_t *err)
uint64_t blib_strtoul(const char_t *str, char_t **endptr, uint32_t base, bool_t *err)
real32_t blib_strtof(const char_t *str, char_t **endptr, bool_t *err)
real64_t blib_strtod(const char_t *str, char_t **endptr, bool_t *err)
void blib_qsort(byte_t *array, const uint32_t nelems, const uint32_t size, FPtr_compare func_compare)
void blib_qsort_ex(const byte_t *array, const uint32_t nelems, const uint32_t size, FPtr_compare_ex func_compare, const byte_t *data)
bool_t blib_bsearch(const byte_t *array, const byte_t *key, const uint32_t nelems, const uint32_t size, FPtr_compare func_compare, uint32_t *pos)
bool_t blib_bsearch_ex(const byte_t *array, const byte_t *key, const uint32_t nelems, const uint32_t size, FPtr_compare_ex func_compare, const byte_t *data, uint32_t *pos)
const char_t *blib_getenv(const char_t *name)

